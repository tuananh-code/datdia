<?php

namespace Modules\Space\Controllers;

use App\Http\Controllers\Controller;
use Modules\Location\Models\LocationCategory;
use Modules\Space\Models\Space;
use Illuminate\Http\Request;
use Modules\Location\Models\Location;
use Modules\Review\Models\Review;
use Modules\Core\Models\Attributes;
use DB;

class OwnerController extends Controller
{
    protected $spaceClass;
    protected $locationClass;
    /**
     * @var string
     */
    private $locationCategoryClass;

    public function __construct()
    {
        $this->spaceClass = Space::class;
        $this->locationClass = Location::class;
        $this->locationCategoryClass = LocationCategory::class;
    }

    public function callAction($method, $parameters)
    {
        if (!Space::isEnable()) {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {
        $is_ajax = $request->query('_ajax');
        $list = call_user_func([$this->spaceClass, 'search'], $request);
        $markers = [];
        if (!empty($list)) {
            foreach ($list as $row) {
                if ($row->contact_name) {
                    $name = $row->contact_name;
                } else {
                    $name = $row->author->user_name;
                }
                $div = "<div class='parent-down'>
                            <div>
                                <p class='arrow-down' style='
                                width: max-content;
                                background: red;
                                padding: .5em;
                                color: white;
                                border-radius: 10px;
                                font-size:14px;
                                text-align:center'>$name</p>
                            </div>
                        </div>";
                $markers[] = [
                    "id"      => $row->id,
                    "title"   => $row->title,
                    "lat"     => (float)$row->map_lat,
                    "lng"     => (float)$row->map_lng,
                    //Get seller information
                    "contact_name" => $row->contact_name,
                    "contact" => $row->contact,
                    // Change to get thumb image on S3
                    "gallery" => $row->getGalleryS3(true),
                    "infobox" => view('Space::frontend.layouts.search.loop-gird', ['row' => $row, 'disable_lazyload' => 1, 'wrap_class' => 'infobox-item'])->render(),
                    // 'marker' => get_file_url(setting_item("space_icon_marker_map"), 'full') ?? url('images/icons/png/pin.png'),
                    'marker' => $div,
                    // get_price_show($row->price),
                ];
            }
        }
        $limit_location = 15;
        if (empty(setting_item("space_location_search_style")) or setting_item("space_location_search_style") == "normal") {
            $limit_location = 1000;
        }

        $current_path = serverPath();
        if (!$current_path) {
            $data = [
                'rows'               => $list,
                'list_location'      => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translations'])->get()->toTree(),
                'space_min_max_price' => $this->spaceClass::getMinMaxPrice(),
                'markers'            => $markers,
                "blank"              => 1,
                "seo_meta"           => $this->spaceClass::getSeoMetaForPageList(),
            ];
        } else {
            $data = [
                'rows'               => $list,
                'list_location'      => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translations'])->get()->toTree(),
                'space_min_max_price' => null,
                'markers'            => $markers,
                "blank"              => 1,
                "seo_meta"           => $this->spaceClass::getSeoMetaForPageList(),
            ];
        }
        $layout = setting_item("space_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }
        if ($is_ajax) {
            return $this->sendSuccess([
                'html'    => view('Space::frontend.layouts.search-map.list-item', $data)->render(),
                "markers" => $data['markers']
            ]);
        }
        $data['attributes'] = Attributes::where('service', 'space')->orderBy("position", "desc")->with(['terms', 'translations'])->get();

        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            // dd($data);
            return view('Space::frontend.search-map', $data);
        }
        return view('Space::frontend.search', $data);
    }
    public function estate(Request $request, $contact)
    {
        $is_ajax = $request->query('_ajax');
        $lists = $this->spaceClass::where('contact', $contact)->get();
        if (@$lists[0]) {
            $list = $this->spaceClass::where('contact', $contact)->get();
        } else {
            $list = $this->spaceClass::where('create_user', $contact)->get();
        }
        $markers = [];
        if (!empty($list)) {
            foreach ($list as $row) {
                $price = formatNumberToVietnameseRound($row->price);
                $div = "<div class='parent-down'>
                            <div>
                                <p class='arrow-down' style='
                                width: 60px;
                                background: red;
                                padding: .5em;
                                color: white;
                                border-radius: 10px;
                                font-size:14px;
                                text-align:center'>$price</p>
                            </div>
                        </div>";
                $markers[] = [
                    "id"      => $row->id,
                    "title"   => $row->title,
                    "lat"     => (float)$row->map_lat,
                    "lng"     => (float)$row->map_lng,
                    //Get seller information
                    "contact_name" => $row->contact_name,
                    "contact" => $row->contact,
                    // Change to get thumb image on S3
                    "gallery" => $row->getGalleryS3(true),
                    "infobox" => view('Space::frontend.layouts.search.loop-gird', ['row' => $row, 'disable_lazyload' => 1, 'wrap_class' => 'infobox-item'])->render(),
                    // 'marker' => get_file_url(setting_item("space_icon_marker_map"), 'full') ?? url('images/icons/png/pin.png'),
                    'marker' => $div
                    // get_price_show($row->price),
                ];
            }
        }
        $limit_location = 15;
        if (empty(setting_item("space_location_search_style")) or setting_item("space_location_search_style") == "normal") {
            $limit_location = 1000;
        }

        $current_path = serverPath();
        if (!$current_path) {
            $data = [
                'rows'               => $list,
                'list_location'      => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translations'])->get()->toTree(),
                'space_min_max_price' => $this->spaceClass::getMinMaxPrice(),
                'markers'            => $markers,
                "blank"              => 1,
                "seo_meta"           => $this->spaceClass::getSeoMetaForPageList(),
                "current_path"       => $current_path
            ];
        } else {
            $data = [
                'rows'               => $list,
                'list_location'      => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translations'])->get()->toTree(),
                'space_min_max_price' => null,
                'markers'            => $markers,
                "blank"              => 1,
                "seo_meta"           => $this->spaceClass::getSeoMetaForPageList(),
                "current_path"       => $current_path
            ];
        }
        $layout = setting_item("space_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }
        if ($is_ajax) {
            return $this->sendSuccess([
                'html'    => view('Space::frontend.layouts.search-map.list-item', $data)->render(),
                "markers" => $data['markers']
            ]);
        }
        $data['attributes'] = Attributes::where('service', 'space')->orderBy("position", "desc")->with(['terms', 'translations'])->get();

        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            // dd($data);
            return view('Space::frontend.search-map', $data);
        }
        return view('Space::frontend.search', $data);
    }
}
